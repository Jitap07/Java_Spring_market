#NOTA: Dar espacios antes ó después del " = ", es un error de sintaxis.

#--------------------------------------------------------------------------------------------------
#--------------------------------   1) Configuraciones "spring."   --------------------------------
#--------------------------------------------------------------------------------------------------
#1.1) Nombre del Proyecto:
spring.application.name=market

#1.2) Activa el Perfil "application-prod" (PRODUCCIÓN):
spring.profiles.active=prod

#1.3) Importa las variables de entorno definidas en el ".env" (usado LOCALMENTE, porque REMOTAMENTE no se envía al GitHub):
spring.config.import=optional:file:.env[.properties]

#1.4) Permite que Hibernate genere consultas SQL compatible con PostgreSQL:
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#1.5) Ajusta automáticamente el esquema de la base ante algún cambio en las entidades del programa.
#En RAILWAY, se crean las tablas en la base (si no existieran), pero sin datos, porque usa lo codificado con SPRING.
#NOTA: Podría usarse en DESARROLLO, en PRODUCCIÓN NO.
#spring.jpa.hibernate.ddl-auto=update

#1.6) Cierra la sesión de Hibernate al finalizar la solicitud HTTP del controlador, o sea, cuando el servidor procesa tu petición y te envía una respuesta (evita el "LazyInitializationException").
#Se recomienda usar en PRODUCCIÓN, para mejorar el rendimiento y el control de transacciones.
#spring.jpa.open-in-view=false

#NOTA: Para éste proyecto, por la codificación realizada, comentar la línea "spring.jpa.open-in-view=false", tanto en DESARROLLO como en PRODUCCIÓN (Spring tomará por defecto "true").
#Mantiene la sesión abierta y permite acceder a los datos de otras tablas relacionadas (para cuando consultas más de una tabla en un mismo query).


#--------------------------------------------------------------------
#-- 1.7) Configuración para crear y cargar las tablas en Railway : --
#--------------------------------------------------------------------
#1.7.1) Activa la ejecución de los scripts de inicialización ("schema.sql", "data.sql", etc).
#Deben ubicarse en el classpath, usualmente en "src/main/resources", sino NO serán ejecutados.
#NOTA: NO usar en PRODUCCIÓN, porque la creación de tablas y la carga se hace por el Administrador de base de datos (conectado a RAILWAY):
#spring.sql.init.mode=always

#1.7.2) Desactiva la ejecución de los scripts de inicialización:
spring.sql.init.mode=never

#----------------------------------------------------------------------------------------------
#-- 1.8) Configuración usada en el desarrollo y prueba de API's (ejecutados en el Postman) : --
#----------------------------------------------------------------------------------------------
#Usar en DESARROLLO, ya que permite ver las consultas que se ejecutan, por consola:

#1.8.1) Formatea las consultas SQL para que sean más legibles (con saltos de línea e indentación).
#spring.jpa.properties.hibernate.format_sql=true

#1.8.2) Muestra las consultas SQL ejecutadas por Hibernate en los logs (nivel de detalle DEBUG).
#logging.level.org.hibernate.SQL=DEBUG

#1.8.3) Muestra los parámetros de las consultas SQL en los logs (nivel de detalle TRACE).
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE


#--------------------------------------------------------------------------------------------------
#--------------------------------   2) Configuraciones "server."   --------------------------------
#--------------------------------------------------------------------------------------------------
#2.1) Ruta HTTP Principal del proyecto:
server.servlet.context-path=/proyecto01-market
#--------------------------------------------------------------------------------------------------
